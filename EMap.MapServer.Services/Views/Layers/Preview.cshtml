@model EMap.MapServer.Services.ViewModels.PreviewModel
@using EMap.MapServer.OpenLayers;
@using EMap.MapServer.OpenLayers.layer;
@using EMap.MapServer.OpenLayers.source;
@{
    ViewData["Title"] = "预览";
}
@section Head{
    <link rel="stylesheet" href="~/css/ol.css" type="text/css">
    <style>
        .map {
            height: 100%;
            width: 100%;
        }
    </style>
    <script src="~/js/ol.js" type="text/javascript"></script>
    <script src="~/js/proj4.js" type="text/javascript"></script>
}
<div id="map" class="map"></div>
@section Scripts{
    <script type="text/javascript">
        function getTileLayer(tileLayerPara) {
            var layer = null;
            var sourcePara = tileLayerPara.source;
            if (sourcePara == null) {
                return layer;
            }
            var tileGridPara = sourcePara.tileGrid;
            if (tileGridPara == null) {
                return layer;
            }
            var tileGrid = new ol.tilegrid.WMTS({
                origin: tileGridPara.origin,
                resolutions: tileGridPara.resolutions,
                extent: tileGridPara.extent,
                matrixIds: tileGridPara.matrixIds
            });
            console.log(tileGrid.getExtent());
            var wmtsSource = new ol.source.WMTS({
                url: sourcePara.url,
                layer: sourcePara.layer,
                tileGrid: tileGrid,
                matrixSet: sourcePara.matrixSet,
                format:sourcePara.format
            });
            layer = new ol.layer.Tile({
                source: wmtsSource
            });
            return layer;
        }
        function addProjection(epsg) {
            $.ajax({
                url: 'https://epsg.io/?format=json&q=' + epsg,
                async: false,
                type: 'GET',
                success: function (response) {
                    const results = response['results'];
                    if (results && results.length > 0) {
                        for (let i = 0, ii = results.length; i < ii; i++) {
                            const result = results[i];
                            if (result) {
                                var code = result['code'];
                                var name = result['name'];
                                var area = result['area'];
                                var unit = result['unit'];
                                var proj4def = result['proj4'];
                                var bbox = result['bbox'];
                                if (code && code.length > 0 && proj4def && proj4def.length > 0 &&
                                    bbox && bbox.length == 4) {
                                    code = "EPSG:" + code;
                                    unit = unit.split(" ")[0];
                                    var extent = [bbox[1], bbox[2], bbox[3], bbox[0]];
                                    var worldExtent = [bbox[1], bbox[2], bbox[3], bbox[0]];
                                    var units = ol.proj.Units.DEGREES;
                                    var metersPerUnit = proj4def.to_meter;
                                    const radius = 6378137;
                                    switch (unit) {
                                        case "degree":
                                            metersPerUnit = Math.PI * radius / 180;
                                            extent = [bbox[1], bbox[2], bbox[3], bbox[0]];
                                            units = ol.proj.Units.DEGREES;
                                            break;
                                        case "metre":
                                            var halfSize = Math.PI * radius;
                                            extent = [-halfSize, -halfSize, halfSize, halfSize];
                                            units = ol.proj.Units.METERS;
                                            break;
                                    }
                                    var projection = new ol.proj.Projection({
                                        code: code,
                                        units: units,
                                        extent: extent,
                                        axisOrientation: proj4def.axis,
                                        global: area == "World",
                                        metersPerUnit: metersPerUnit,
                                        worldExtent: worldExtent
                                    });
                                    ol.proj.addProjection(projection);
                                }
                            }
                        }
                    }
                    else {
                        alert("添加空间参考" + epsg + "失败:");
                    }
                }
            });
        }
        function getView(viewPara) {
            var view = null;
            if (viewPara == null) {
                return ;
            }
            var code = viewPara.projection;
            var projection = ol.proj.get(code);
            if (projection == null) {
                var epsg = code.split(":")[1];
                addProjection(epsg);
            }
            view = new ol.View({
                center: viewPara.center,
                resolution: viewPara.resolution,
                minResolution: viewPara.minResolution,
                maxResolution:viewPara.maxResolution,
                extent: viewPara.extent,
                projection: code
            });
            return view;
        }
        function initializeMap(mapPara) {
            if (mapPara == null) {
                return;
            }
            var layers = [];
            var layersPara = mapPara.layers;
            if (layersPara != null) {
                for (var i = 0; i < layersPara.length; i++) {
                    var layerPara = layersPara[i];
                    var layerType = layerPara.javaScriptName;
                    var layer = null;
                    switch (layerType) {
                        case "ol.layer.Tile":
                            var layer = getTileLayer(layerPara);
                            break;
                    }
                    if (layer != null) {
                        layers.push(layer);
                    }
                }
            }
            var viewPara = mapPara.view;
            var view = getView(viewPara);
            var map = new ol.Map({
                layers: layers,
                target: 'map',
                view: view
            });
        }

        var width = $("#map").width();
        var height = $("#map").height();
        var url = '@Url.Action($"Preview" )' + '/' + width + '/' + height;
        console.log(url);
        $.ajax({
            url: url,
            async:false,
            type: 'GET',
            success: function (mapPara) {
                if (mapPara != null) {
                    initializeMap(mapPara);
                }
                else {
                    alert("初始化错误");
                }
            },
            error: function (data) {
                alert("错误："+data);
            }
        });

    </script>
}
